diff --git a/dist/index.html b/dist/index.html
index 21668a1..c3d6982 100644
--- a/dist/index.html
+++ b/dist/index.html
@@ -30,7 +30,7 @@
                 <div id="taskList">
                 </div>
             </div>
-            <div id="footer">Copyright © 2021 <a href="https://github.com/mohite-abhi/todoList-website" target="_blank">mohite-abhi</a></div>
+            <div id="footer">Copyright © 2021 <a href="https://github.com/mohite-abhi">mohite-abhi</a></div>
         </div>
     </body>
     <script src="./main.js"></script>
diff --git a/dist/main.js b/dist/main.js
index 5387f66..40efc98 100644
--- a/dist/main.js
+++ b/dist/main.js
@@ -1 +1 @@
-(()=>{"use strict";var e,t=function(e=[],t=null){var n={};return n.tasks=JSON.parse(JSON.stringify(e)),n.taskStatus=null==t?new Array(e.length).fill(0):JSON.parse(JSON.stringify(t)),n.addTask=function(e){n.tasks.push(e),n.taskStatus.push(0)},n.completeTask=function(e){n.taskStatus[e]=1},n.removeTask=function(e){n.taskStatus.splice(e,1),n.tasks.splice(e,1)},n.show=function(){for(let e=0;e<n.tasks.length;e++)console.log(n.taskStatus[e]+" "+n.tasks[e])},n},n=function(e,t,n,s,i=!1,r=1){var a={};return a.title=e||"no title",a.description=t||"no description",a.dueDate=n||JSON.stringify(new Date).slice(1,11),a.priority=r,a.checkList=s,a.isComplete=i,a},s=function(e,t=[]){var n={};return n.name=e,n.toDoLists=t,n.addToProject=function(e){n.toDoLists.push(e)},n.removeFromProject=function(e){n.toDoLists.splice(e,1)},n},i=function(e="anonymous"){var i={};return i.name=e,i.projects=[new s("default",[n("Getting started","have fun",JSON.stringify(new Date).slice(1,11),t(["item 1","item 2"])),n("Again getting started","have fun again",JSON.stringify(new Date).slice(1,11),t(["item 3","item 4"]))]),new s("default2",[n("Getting started2","have fun2",JSON.stringify(new Date).slice(1,11),t(["item 12","item 22"])),n("Again getting started2","have fun again2",JSON.stringify(new Date).slice(1,11),t(["item 32","item 42"]))])],i.createNewProject=function(e){tempProj=s(e),i.projects.push(tempProj)},i.removeProject=function(e){i.projects.splice(e,1)},i},r=e={pushUpdate:function(){localStorage.setItem("user",JSON.stringify(this.user))},user:"",setUpUser:function(){if(null==localStorage.getItem("user"))e.user=new i,e.pushUpdate();else{var r=JSON.parse(localStorage.user),a=new i(r.name);a.removeProject(0),a.removeProject(0),r.projects.forEach((e=>{var i=new s(e.name);e.toDoLists.forEach((e=>{i.addToProject(new n(e.title,e.description,e.dueDate,new t(e.checkList.tasks,e.checkList.taskStatus),e.isComplete))})),a.projects.push(i)})),e.user=a,e.pushUpdate()}}},a=function(e,t=null){var n=document.createElement("div");return n.className=e,null!=t&&(n.innerHTML=t),n},o=function(e,t,n=""){var s=document.createElement("input");return s.className=e,s.maxLength=t,s.placeholder=n,s},d=function(e,t=null){var n=a("checklistinputitem"),s=a("tick2"),i=o("detail2",100,"add task");return null!=t&&(i.value=t),n.appendChild(s),n.appendChild(i),e.appendChild(n),e},c=function(){var e,t=a("detailedTaskItem"),n=a("plus","+>"),s=o("titleInput",20,"Title"),i=function(e,t,n=""){var s=document.createElement("textarea");return s.className=e,s.maxLength=t,s.placeholder=n,s}("descriptionInput",200,"short description"),r=("duedateInput",(e=document.createElement("input")).className="duedateInput",e.type="date",e.min=JSON.stringify(new Date).slice(1,11),e),c=a("checklistInput");c=d(c);var l=a("saveTask","&#8629;");return t.appendChild(n),t.appendChild(s),t.appendChild(i),t.appendChild(r),t.appendChild(c),t.appendChild(l),n.onclick=e=>{d(e.srcElement.parentNode.childNodes[4])},t},l=function(e){var s={};return s.projectNo=e,s.markTaskAsDone=function(){var e=document.getElementById(this.parentNode.id).childNodes[0],t=JSON.parse(this.parentNode.id);0==r.user.projects[t[0]].toDoLists[t[1]].isComplete?(e.innerHTML="&#10003;",r.user.projects[t[0]].toDoLists[t[1]].isComplete=!0):(e.innerHTML="&#9634;",r.user.projects[t[0]].toDoLists[t[1]].isComplete=!1),r.pushUpdate()},s.markChecklistItem=function(){var e=document.getElementById(this.id).childNodes[0],t=JSON.parse(this.id);0==r.user.projects[t[0]].toDoLists[t[1]].checkList.taskStatus[t[2]]?(e.innerHTML="&#10003;",r.user.projects[t[0]].toDoLists[t[1]].checkList.taskStatus[t[2]]=!0):(e.innerHTML="&#9634;",r.user.projects[t[0]].toDoLists[t[1]].checkList.taskStatus[t[2]]=!1),r.pushUpdate()},s.expandTask=function(e){s.renderTasks(e[0]);var i,o,l,p,u,h,m,k,f,N=document.getElementById(JSON.stringify(e)),v=(i=r.user.projects[e[0]].toDoLists[e[1]],o=1==i.isComplete?"&#10003;":"&#9634;",l=a("tick",o),p=a("title",i.title),u=a("description",i.description),h=a("duedate",i.dueDate.slice(0,10)),m=function(e){var t=a("checklist");for(let r=0;r<e.tasks.length;r++){var n=a("tick");n.innerHTML=0==e.taskStatus[r]?"&#9634;":"&#10003;";var s=a("detail");s.innerHTML=e.tasks[r];var i=a("checklistitem");i.appendChild(n),i.appendChild(s),t.appendChild(i)}return t}(i.checkList),k=a("detailedTaskItem"),f=a("editButton","edit"),k.appendChild(l),k.appendChild(p),k.appendChild(u),k.appendChild(h),k.appendChild(m),k.appendChild(f),k);v.id=N.id,v.childNodes[0].onclick=s.markTaskAsDone,v.lastElementChild.onclick=i=>{var a=JSON.parse(i.srcElement.parentNode.id),o=c(),l=r.user.projects[a[0]].toDoLists[a[1]];o.childNodes[1].value=l.title,o.childNodes[2].value=l.description,o.childNodes[3].value=l.dueDate,o.childNodes[4].firstChild.remove();for(let e=0;e<l.checkList.tasks.length;e++){const t=l.checkList.tasks[e];d(o.childNodes[4],t)}var p=document.getElementById("taskList");o.childNodes[5].onclick=i=>{!function(i){var a=[];i[4].childNodes.forEach((e=>{var t=e.childNodes[1].value;""!=t&&a.push(t)}));var o=n(i[1].value,i[2].value,i[3].value,t(a));r.user.projects[e[0]].toDoLists.splice(e[1],1),r.user.projects[e[0]].toDoLists.push(o),s.renderTasks(e[0]),r.pushUpdate()}(i.srcElement.parentNode.childNodes)},p.replaceChild(o,document.getElementById(JSON.stringify(e))),document.getElementsByClassName("titleInput")[0].focus()};var g=0;v.childNodes[4].childNodes.forEach((t=>{t.id=JSON.stringify([e[0],e[1],g++]),t.onclick=s.markChecklistItem})),N.parentNode.replaceChild(v,N)},s.reindexTaskElemId=function(){for(var e=document.getElementById("taskList").firstElementChild,t=0;null!=e;)"plus"!=e.firstChild.firstChild.className&&(e.id=JSON.stringify([s.projectNo,t++])),e=e.nextElementSibling},s.deleteThisTask=function(e){var t=JSON.parse(this.parentNode.id);document.getElementById(this.parentNode.id).remove(),r.user.projects[t[0]].toDoLists.splice(t[1],1),s.reindexTaskElemId(),r.pushUpdate()},s.renderTaskElement=function(e){document.getElementById("taskList").appendChild(e)},s.renderTasks=function(e=s.projectNo){document.getElementById("taskList").innerHTML="";var t=r.user.projects[e],n=0;if(null!=t){var i=function(){s.expandTask(JSON.parse(this.parentNode.id))};t.toDoLists.forEach((t=>{var r,o,d,c,l,p,u,h,m,k,f=(r=t.isComplete,o=t.title,d=t.description,c=t.dueDate.slice(0,10),l=a("tick",1==r?"&#10003;":"&#9634;"),p=a("title",o),u=a("description",d),h=a("duedate",c),m=a("delete","x"),(k=a("taskItem")).appendChild(l),k.appendChild(p),k.appendChild(u),k.appendChild(h),k.appendChild(m),k);f.childNodes[0].onclick=s.markTaskAsDone;for(let e=1;e<4;e++)f.childNodes[e].onclick=i;f.childNodes[4].onclick=s.deleteThisTask,f.id=JSON.stringify([e,n++]),s.renderTaskElement(f)}))}},s},p=function(){var e,i,d;r.setUpUser(),(d=document.getElementById("username")).innerHTML=r.user.name,d.onclick=function(){var e=document.getElementById("username"),t=function(){var e=o("uname",20,"enter name"),t=a("ok","&#8629;"),n=a("username");return n.appendChild(e),n.appendChild(t),n}();t.id="username",t.childNodes[1].onclick=()=>{var e=t.childNodes[0].value;r.user.name=e||"anonymous",r.pushUpdate(),location.reload()},e.parentElement.replaceChild(t,e)},(e=0,i={},i.projectNo=e,i.myTaskRenderer=l(i.projectNo),i.projects=r.user.projects,i.highlight=e=>{var t=document.getElementsByClassName("name");for(let n=0;n<t.length;n++)t[n].style.borderColor=n==e?"rgb(255, 216, 100)":"rgb(255, 216, 100,0)"},i.openProject=e=>{var t=JSON.parse(e.srcElement.parentNode.id);i.highlight(t[0]),i.renderProjectList(t[0])},i.deleteProject=function(){var e=JSON.parse(this.parentNode.id);r.user.projects.splice([e[0]],1),r.pushUpdate(),p()},i.renderProjectCreator=function(){document.getElementById("projButton").onclick=()=>{var e,t,n,d=document.getElementById("list"),c=(e=o("projInput",20),t=a("projSave","&#8629;"),(n=a("projectItem")).appendChild(e),n.appendChild(t),n);if(c.childNodes[1].onclick=function(e){var t=e.srcElement.parentNode.childNodes[0].value,n=s(t||"new project");r.user.projects.push(n),i.renderProjectList(r.user.projects.length-1),r.pushUpdate()},0==d.childElementCount)d.appendChild(c);else{var l=document.getElementsByClassName("projectItem");"projInput"!=l[0].childNodes[0].className&&d.insertBefore(c,l[0])}document.getElementsByClassName("projInput")[0].focus()}},i.renderTaskCreator=function(){document.getElementById("button").onclick=()=>{var e=document.getElementById("taskList"),s=c();if(s.childNodes[5].onclick=e=>{!function(e){var s=[];e[4].childNodes.forEach((e=>{var t=e.childNodes[1].value;""!=t&&s.push(t)}));var a=n(e[1].value,e[2].value,e[3].value,t(s));r.user.projects[i.projectNo].toDoLists.push(a),i.myTaskRenderer.renderTasks(),r.pushUpdate()}(e.srcElement.parentNode.childNodes)},0==e.childElementCount)e.appendChild(s);else{var a=JSON.parse(e.lastElementChild.id);i.myTaskRenderer.renderTasks(a[0]);var o=e.firstElementChild;"tick"==o.childNodes[0].className&&e.insertBefore(s,o)}document.getElementsByClassName("titleInput")[0].focus()}},i.renderProjectList=function(e=i.projectNo){document.getElementById("list").innerHTML="";var t=0;i.projects.forEach((e=>{var n=function(e){var t=a("name",e),n=a("del",e);n.innerHTML="x",t.innerHTML=e;var s=a("projectItem");return s.appendChild(t),s.appendChild(n),s}(e.name);n.id=JSON.stringify([t++]),document.getElementById("list").appendChild(n),n.childNodes[0].onclick=i.openProject,n.childNodes[1].onclick=i.deleteProject})),i.highlight(e),i.myTaskRenderer.renderTasks(e),i.renderProjectCreator(),i.renderTaskCreator()},i).renderProjectList()};p()})();
\ No newline at end of file
+(()=>{"use strict";var e,t=function(e=[],t=null){var n={};return n.tasks=JSON.parse(JSON.stringify(e)),n.taskStatus=null==t?new Array(e.length).fill(0):JSON.parse(JSON.stringify(t)),n.addTask=function(e){n.tasks.push(e),n.taskStatus.push(0)},n.completeTask=function(e){n.taskStatus[e]=1},n.removeTask=function(e){n.taskStatus.splice(e,1),n.tasks.splice(e,1)},n.show=function(){for(let e=0;e<n.tasks.length;e++)console.log(n.taskStatus[e]+" "+n.tasks[e])},n},n=function(e,t,n,s,i=!1,a=1){var r={};return r.title=e||"no title",r.description=t||"no description",r.dueDate=n||JSON.stringify(new Date).slice(1,11),r.priority=a,r.checkList=s,r.isComplete=i,r},s=function(e,t=[]){var n={};return n.name=e,n.toDoLists=t,n.addToProject=function(e){n.toDoLists.push(e)},n.removeFromProject=function(e){n.toDoLists.splice(e,1)},n},i=function(e="anonymous"){var i={};return i.name=e,i.projects=[new s("default",[n("Getting started","have fun",JSON.stringify(new Date).slice(1,11),t(["item 1","item 2"])),n("Again getting started","have fun again",JSON.stringify(new Date).slice(1,11),t(["item 3","item 4"]))]),new s("default2",[n("Getting started2","have fun2",JSON.stringify(new Date).slice(1,11),t(["item 12","item 22"])),n("Again getting started2","have fun again2",JSON.stringify(new Date).slice(1,11),t(["item 32","item 42"]))])],i.createNewProject=function(e){tempProj=s(e),i.projects.push(tempProj)},i.removeProject=function(e){i.projects.splice(e,1)},i},a=e={pushUpdate:function(){localStorage.setItem("user",JSON.stringify(this.user))},user:"",initiatePage:function(){if(null==localStorage.getItem("user"))e.user=new i,e.pushUpdate();else{var a=JSON.parse(localStorage.user),r=new i(a.name);r.removeProject(0),r.removeProject(0),a.projects.forEach((e=>{var i=new s(e.name);e.toDoLists.forEach((e=>{i.addToProject(new n(e.title,e.description,e.dueDate,new t(e.checkList.tasks,e.checkList.taskStatus),e.isComplete))})),r.projects.push(i)})),e.user=r,e.pushUpdate()}}},r=function(e,t=null){var n=document.createElement("div");return n.className=e,null!=t&&(n.innerHTML=t),n},d=function(e,t,n=""){var s=document.createElement("input");return s.className=e,s.autofocus="true",s.maxLength=t,s.placeholder=n,s},o=function(e,t=null){var n=r("checklistinputitem"),s=r("tick2"),i=d("detail2",100,"add task");return null!=t&&(i.value=t),n.appendChild(s),n.appendChild(i),e.appendChild(n),e},l=function(){var e,t=r("detailedTaskItem"),n=r("plus","+>"),s=d("titleInput",20,"Title"),i=function(e,t,n=""){var s=document.createElement("textarea");return s.className=e,s.autofocus=!0,s.maxLength=t,s.placeholder=n,s}("descriptionInput",200,"short description"),a=("duedateInput",(e=document.createElement("input")).className="duedateInput",e.type="date",e.min=JSON.stringify(new Date).slice(1,11),e),l=r("checklistInput");l=o(l);var c=r("saveTask","&#8629;");return t.appendChild(n),t.appendChild(s),t.appendChild(i),t.appendChild(a),t.appendChild(l),t.appendChild(c),n.onclick=e=>{o(e.srcElement.parentNode.childNodes[4])},t},c=function(e){var s={};return s.projectNo=e,s.markTaskAsDone=function(){var e=document.getElementById(this.parentNode.id).childNodes[0],t=JSON.parse(this.parentNode.id);0==a.user.projects[t[0]].toDoLists[t[1]].isComplete?(e.innerHTML="&#10003;",a.user.projects[t[0]].toDoLists[t[1]].isComplete=!0):(e.innerHTML="&#9634;",a.user.projects[t[0]].toDoLists[t[1]].isComplete=!1),a.pushUpdate()},s.markChecklistItem=function(){var e=document.getElementById(this.id).childNodes[0],t=JSON.parse(this.id);0==a.user.projects[t[0]].toDoLists[t[1]].checkList.taskStatus[t[2]]?(e.innerHTML="&#10003;",a.user.projects[t[0]].toDoLists[t[1]].checkList.taskStatus[t[2]]=!0):(e.innerHTML="&#9634;",a.user.projects[t[0]].toDoLists[t[1]].checkList.taskStatus[t[2]]=!1),a.pushUpdate()},s.expandTask=function(e){s.renderTasks(e[0]);var i,d,c,u,p,m,h,k,f,N=document.getElementById(JSON.stringify(e)),v=(i=a.user.projects[e[0]].toDoLists[e[1]],d=1==i.isComplete?"&#10003;":"&#9634;",c=r("tick",d),u=r("title",i.title),p=r("description",i.description),m=r("duedate",i.dueDate.slice(0,10)),h=function(e){var t=r("checklist");for(let a=0;a<e.tasks.length;a++){var n=r("tick");n.innerHTML=0==e.taskStatus[a]?"&#9634;":"&#10003;";var s=r("detail");s.innerHTML=e.tasks[a];var i=r("checklistitem");i.appendChild(n),i.appendChild(s),t.appendChild(i)}return t}(i.checkList),k=r("detailedTaskItem"),f=r("editButton","edit"),k.appendChild(c),k.appendChild(u),k.appendChild(p),k.appendChild(m),k.appendChild(h),k.appendChild(f),k);v.id=N.id,v.childNodes[0].onclick=s.markTaskAsDone,v.lastElementChild.onclick=i=>{var r=JSON.parse(i.srcElement.parentNode.id),d=l(),c=a.user.projects[r[0]].toDoLists[r[1]];d.childNodes[1].value=c.title,d.childNodes[2].value=c.description,d.childNodes[3].value=c.dueDate,d.childNodes[4].firstChild.remove();for(let e=0;e<c.checkList.tasks.length;e++){const t=c.checkList.tasks[e];o(d.childNodes[4],t)}var u=document.getElementById("taskList");d.childNodes[5].onclick=i=>{!function(i){var r=[];i[4].childNodes.forEach((e=>{var t=e.childNodes[1].value;""!=t&&r.push(t)}));var d=n(i[1].value,i[2].value,i[3].value,t(r));a.user.projects[e[0]].toDoLists.splice(e[1],1),a.user.projects[e[0]].toDoLists.push(d),document.getElementById("taskList").innerHTML="",s.renderTasks(e[0]),a.pushUpdate()}(i.srcElement.parentNode.childNodes)},u.replaceChild(d,document.getElementById(JSON.stringify(e)))};var g=0;v.childNodes[4].childNodes.forEach((t=>{t.id=JSON.stringify([e[0],e[1],g++]),t.onclick=s.markChecklistItem})),N.parentNode.replaceChild(v,N)},s.reindexTaskElemId=function(){for(var e=document.getElementById("taskList").firstElementChild,t=0;null!=e;)"plus"!=e.firstChild.firstChild.className&&(e.id=JSON.stringify([s.projectNo,t++])),e=e.nextElementSibling},s.deleteThisTask=function(e){var t=JSON.parse(this.parentNode.id);document.getElementById(this.parentNode.id).remove(),a.user.projects[t[0]].toDoLists.splice(t[1],1),s.reindexTaskElemId(),a.pushUpdate()},s.renderTaskElement=function(e){document.getElementById("taskList").appendChild(e)},s.renderTasks=function(e=s.projectNo){document.getElementById("taskList").innerHTML="";var t=a.user.projects[e],n=0;if(null!=t){var i=function(){s.expandTask(JSON.parse(this.parentNode.id))};t.toDoLists.forEach((t=>{var a,d,o,l,c,u,p,m,h,k,f=(a=t.isComplete,d=t.title,o=t.description,l=t.dueDate.slice(0,10),c=r("tick",1==a?"&#10003;":"&#9634;"),u=r("title",d),p=r("description",o),m=r("duedate",l),h=r("delete","x"),(k=r("taskItem")).appendChild(c),k.appendChild(u),k.appendChild(p),k.appendChild(m),k.appendChild(h),k);f.childNodes[0].onclick=s.markTaskAsDone;for(let e=1;e<4;e++)f.childNodes[e].onclick=i;f.childNodes[4].onclick=s.deleteThisTask,f.id=JSON.stringify([e,n++]),s.renderTaskElement(f)}))}},s},u=function(e){var i=c(e),o=a.user.projects,p=0,h=e=>{var t=document.getElementsByClassName("name");for(let n=0;n<t.length;n++)t[n].style.borderColor=n==e?"rgb(255, 216, 100)":"rgb(255, 216, 100,0)"},k=e=>{var t=JSON.parse(e.srcElement.parentNode.id);h(t[0]),document.getElementById("list").innerHTML="",u(t[0])},f=function(){var e=JSON.parse(this.parentNode.id);a.user.projects.splice([e[0]],1),a.pushUpdate(),document.getElementById("taskList").innerHTML="",document.getElementById("list").innerHTML="",m()};document.getElementById("projButton").onclick=()=>{var e,t,n,i=document.getElementById("list"),o=(e=d("projInput",20),t=r("projSave","&#8629;"),(n=r("projectItem")).appendChild(e),n.appendChild(t),n);if(o.childNodes[1].onclick=function(e){var t=s(e.srcElement.parentNode.childNodes[0].value);a.user.projects.push(t),document.getElementById("list").innerHTML="",document.getElementById("taskList").innerHTML="",u(0),a.pushUpdate()},0==i.childElementCount)i.appendChild(o);else{var l=document.getElementsByClassName("projectItem");"projInput"!=l[0].childNodes[0].className&&i.insertBefore(o,l[0])}document.getElementsByClassName("projInput")[0].focus()},document.getElementById("button").onclick=()=>{var s=document.getElementById("taskList"),r=l();if(r.childNodes[5].onclick=s=>{!function(s){var r=[];s[4].childNodes.forEach((e=>{var t=e.childNodes[1].value;""!=t&&r.push(t)}));var d=n(s[1].value,s[2].value,s[3].value,t(r));a.user.projects[e].toDoLists.push(d),i.renderTasks(),a.pushUpdate()}(s.srcElement.parentNode.childNodes)},0==s.childElementCount)s.appendChild(r);else{var d=JSON.parse(s.lastElementChild.id);i.renderTasks(d[0]);var o=s.firstElementChild;"tick"==o.childNodes[0].className&&s.insertBefore(r,o)}document.getElementsByClassName("titleInput")[0].focus()},o.forEach((e=>{var t=function(e){var t=r("name",e),n=r("del",e);n.innerHTML="x",t.innerHTML=e;var s=r("projectItem");return s.appendChild(t),s.appendChild(n),s}(e.name);t.id=JSON.stringify([p++]),document.getElementById("list").appendChild(t),t.childNodes[0].onclick=k,t.childNodes[1].onclick=f})),h(e),i.renderTasks()},p=function(){var e=document.getElementById("username"),t=function(){var e=d("uname",20,"enter name"),t=r("ok","&#8629;"),n=r("username");return n.appendChild(e),n.appendChild(t),n}();t.id="username",t.childNodes[1].onclick=()=>{var e=t.childNodes[0].value;a.user.name=e||"anonymous",a.pushUpdate(),location.reload()},e.parentElement.replaceChild(t,e)},m=function(){a.initiatePage();var e=document.getElementById("username");e.innerHTML=a.user.name,e.onclick=p,u(0)};m()})();
\ No newline at end of file
diff --git a/src/renderTasks.js b/src/renderTasks.js
index 414192d..0d5eba1 100644
--- a/src/renderTasks.js
+++ b/src/renderTasks.js
@@ -1,5 +1,5 @@
 import { Session, ToDoProject, ToDoList, Checklist } from "./todoClasses"
-import { createTaskDom, createProjectDom, createExpandedTaskDom, createProjInputDom, createTaskEditorDom, createUserInput, addItemToChecklist } from './todoDom'
+import { createTaskDom, createProjectDom, createExpandedTaskDom, createProjInputDom, createTaskInputDom, createUserInput, addItemToChecklist } from './todoDom'
 
 
 
@@ -10,14 +10,14 @@ var TaskRenderer = function (projectNo) {
 
     thisRenderer.markTaskAsDone = function () {
         var elem = document.getElementById(this.parentNode.id).childNodes[0]
-        var addr = JSON.parse(this.parentNode.id)
-        if (Session.user.projects[addr[0]].toDoLists[addr[1]].isComplete == false) {
+        var coor = JSON.parse(this.parentNode.id)
+        if (Session.user.projects[coor[0]].toDoLists[coor[1]].isComplete == false) {
             elem.innerHTML = "&#10003;"
-            Session.user.projects[addr[0]].toDoLists[addr[1]].isComplete = true
+            Session.user.projects[coor[0]].toDoLists[coor[1]].isComplete = true
         }
         else {
             elem.innerHTML = "&#9634;"
-            Session.user.projects[addr[0]].toDoLists[addr[1]].isComplete = false
+            Session.user.projects[coor[0]].toDoLists[coor[1]].isComplete = false
         }
         Session.pushUpdate()
     }
@@ -26,25 +26,28 @@ var TaskRenderer = function (projectNo) {
 
     thisRenderer.markChecklistItem = function () {
         var elem = document.getElementById(this.id).childNodes[0]
-        var addr = JSON.parse(this.id)
-        if (Session.user.projects[addr[0]].toDoLists[addr[1]].checkList.taskStatus[addr[2]] == false) {
+        var coor = JSON.parse(this.id)
+        if (Session.user.projects[coor[0]].toDoLists[coor[1]].checkList.taskStatus[coor[2]] == false) {
             elem.innerHTML = "&#10003;"
-            Session.user.projects[addr[0]].toDoLists[addr[1]].checkList.taskStatus[addr[2]] = true
+            Session.user.projects[coor[0]].toDoLists[coor[1]].checkList.taskStatus[coor[2]] = true
         }
         else {
             elem.innerHTML = "&#9634;"
-            Session.user.projects[addr[0]].toDoLists[addr[1]].checkList.taskStatus[addr[2]] = false
+            Session.user.projects[coor[0]].toDoLists[coor[1]].checkList.taskStatus[coor[2]] = false
         }
         Session.pushUpdate()
     }
 
 
 
-    thisRenderer.expandTask = function (addr) {
-        thisRenderer.renderTasks(addr[0])
-        var old = document.getElementById(JSON.stringify(addr))
+    thisRenderer.expandTask = function (coor) {
+        
+        thisRenderer.renderTasks(coor[0])
+
+        var old = document.getElementById(JSON.stringify(coor))
+
+        var manageEdit = (elem) => {
 
-        var renderTaskEditor = (elem) => {
 
             var saveTaskAgain = function (form) {
                 var checkListItems = []
@@ -53,49 +56,55 @@ var TaskRenderer = function (projectNo) {
                     if (fetchedValue != "")
                         checkListItems.push(fetchedValue)
                 })
-
                 var newCreatedTask = ToDoList(form[1].value, form[2].value, form[3].value, Checklist(checkListItems))
-                Session.user.projects[addr[0]].toDoLists.splice(addr[1], 1)
-                Session.user.projects[addr[0]].toDoLists.push(newCreatedTask)
-                thisRenderer.renderTasks(addr[0])
+
+
+
+                Session.user.projects[coor[0]].toDoLists.splice(coor[1], 1)
+                Session.user.projects[coor[0]].toDoLists.push(newCreatedTask)
+
+                document.getElementById("taskList").innerHTML = ''
+                thisRenderer.renderTasks(coor[0])
                 Session.pushUpdate()
             }
 
-            var prevTaskAddr = JSON.parse(elem.srcElement.parentNode.id)
-            var taskEditor = createTaskEditorDom()
-            var prevTask = Session.user.projects[prevTaskAddr[0]].toDoLists[prevTaskAddr[1]]
-            taskEditor.childNodes[1].value = prevTask.title
-            taskEditor.childNodes[2].value = prevTask.description
-            taskEditor.childNodes[3].value = prevTask.dueDate
-            taskEditor.childNodes[4].firstChild.remove()
+
+            var prevTaskCoor = JSON.parse(elem.srcElement.parentNode.id)
+            var taskInput = createTaskInputDom()
+            var prevTask = Session.user.projects[prevTaskCoor[0]].toDoLists[prevTaskCoor[1]]
+            taskInput.childNodes[1].value = prevTask.title
+            taskInput.childNodes[2].value = prevTask.description
+            taskInput.childNodes[3].value = prevTask.dueDate
+            taskInput.childNodes[4].firstChild.remove()
 
             for (let index = 0; index < prevTask.checkList.tasks.length; index++) {
                 const checklistName = prevTask.checkList.tasks[index];
-                addItemToChecklist(taskEditor.childNodes[4], checklistName)
+                addItemToChecklist(taskInput.childNodes[4], checklistName)
+
             }
 
             var taskArea = document.getElementById("taskList")
 
-            taskEditor.childNodes[5].onclick = (elem) => {
+            taskInput.childNodes[5].onclick = (elem) => {
                 var form = elem.srcElement.parentNode.childNodes;
                 saveTaskAgain(form);
             }
 
 
-            var metaList = prevTaskAddr
-            taskArea.replaceChild(taskEditor, document.getElementById(JSON.stringify(addr)))
-            document.getElementsByClassName("titleInput")[0].focus()
+            var metaList = prevTaskCoor
+            taskArea.replaceChild(taskInput, document.getElementById(JSON.stringify(coor)))
+
 
         }
 
-        var expandedTaskHtml = createExpandedTaskDom(Session.user.projects[addr[0]].toDoLists[addr[1]])
+        var expandedTaskHtml = createExpandedTaskDom(Session.user.projects[coor[0]].toDoLists[coor[1]])
         expandedTaskHtml.id = old.id
         expandedTaskHtml.childNodes[0].onclick = thisRenderer.markTaskAsDone;
-        expandedTaskHtml.lastElementChild.onclick = renderTaskEditor
-        var k = 0
+        expandedTaskHtml.lastElementChild.onclick = manageEdit
 
+        var k = 0
         expandedTaskHtml.childNodes[4].childNodes.forEach((elem) => {
-            elem.id = JSON.stringify([addr[0], addr[1], k++])
+            elem.id = JSON.stringify([coor[0], coor[1], k++])
             elem.onclick = thisRenderer.markChecklistItem;
 
         })
@@ -116,20 +125,25 @@ var TaskRenderer = function (projectNo) {
     }
 
     thisRenderer.deleteThisTask = function (elem) {
-        var addr = JSON.parse(this.parentNode.id)
+        var coor = JSON.parse(this.parentNode.id)
         document.getElementById(this.parentNode.id).remove()
-        Session.user.projects[addr[0]].toDoLists.splice(addr[1], 1)
+        Session.user.projects[coor[0]].toDoLists.splice(coor[1], 1)
+
         thisRenderer.reindexTaskElemId()
+
         Session.pushUpdate()
+
+
+
     }
 
-    thisRenderer.renderTaskElement = function (taskHtml) {
+    thisRenderer.renderTaskElement = function(taskHtml){
         document.getElementById("taskList").appendChild(taskHtml);
     }
 
 
     thisRenderer.renderTasks = function (projNo = thisRenderer.projectNo) {
-
+        
         //clean any already rendered lists
         document.getElementById("taskList").innerHTML = ''
 
@@ -155,7 +169,7 @@ var TaskRenderer = function (projectNo) {
                 //add delete function to task delete button
                 taskElement.childNodes[4].onclick = thisRenderer.deleteThisTask;
 
-                //set task element id according to its proj no and task no
+                //
                 taskElement.id = JSON.stringify([projNo, taskNo++]);
                 thisRenderer.renderTaskElement(taskElement);
 
@@ -172,172 +186,158 @@ var TaskRenderer = function (projectNo) {
 
 
 
-var ProjectRenderer = function (projNo) {
+var renderProjects = function (number) {
+    var myTaskRenderer = TaskRenderer(number)
+    var projects = Session.user.projects;
+    var i = 0
 
-    var thisRenderer = {}
-    thisRenderer.projectNo = projNo
-    thisRenderer.myTaskRenderer = TaskRenderer(thisRenderer.projectNo)
-    thisRenderer.projects = Session.user.projects;
-
-    thisRenderer.highlight = (n) => {
-        // console.log("hello")
+    var highlight = (n) => {
         var projElems = document.getElementsByClassName("name")
-        // console.log(n)
         for (let index = 0; index < projElems.length; index++) {
             const element = projElems[index];
             element.style.borderColor = (index == n) ? "rgb(255, 216, 100)" : "rgb(255, 216, 100,0)"
+
         }
     }
 
-    thisRenderer.openProject = (ele) => {
-        var idProjNo = JSON.parse(ele.srcElement.parentNode.id);
-        thisRenderer.highlight(idProjNo[0])
-        thisRenderer.renderProjectList(idProjNo[0])
+    var openProject = (ele) => {
+        var projNo = JSON.parse(ele.srcElement.parentNode.id);
+        highlight(projNo[0])
+        
+        document.getElementById("list").innerHTML = ''
+        renderProjects(projNo[0])
     }
 
-    thisRenderer.deleteProject = function () {
-        var addr = JSON.parse(this.parentNode.id)
-        Session.user.projects.splice([addr[0]], 1)
+    var deleteProject = function () {
+        var coor = JSON.parse(this.parentNode.id)
+        Session.user.projects.splice([coor[0]], 1)
         Session.pushUpdate()
+        document.getElementById("taskList").innerHTML = ''
+        document.getElementById("list").innerHTML = ''
         renderPage()
+
     }
 
 
-    thisRenderer.renderProjectCreator = function () {
 
-        //add project button
-        document.getElementById("projButton").onclick = () => {
-            var saveProject = function (ele) {
-                var givenProjectName = ele.srcElement.parentNode.childNodes[0].value
-                var newProj = ToDoProject(givenProjectName?givenProjectName:"new project")
-                Session.user.projects.push(newProj)
-                thisRenderer.renderProjectList(Session.user.projects.length-1)
-                Session.pushUpdate()
-            }
+    //add project button
+    document.getElementById("projButton").onclick = () => {
+        var saveProject = function (ele) {
+            var newProj = ToDoProject(ele.srcElement.parentNode.childNodes[0].value)
+            Session.user.projects.push(newProj)
+            document.getElementById("list").innerHTML = ''
+            document.getElementById("taskList").innerHTML = ''
+            renderProjects(0)
+            Session.pushUpdate()
+        }
 
-            var listCover = document.getElementById("list")
-            var projInp = createProjInputDom();
-            projInp.childNodes[1].onclick = saveProject
 
-            if (listCover.childElementCount == 0) {
-                listCover.appendChild(projInp)
-            }
+        var listCover = document.getElementById("list")
+        var projInp = createProjInputDom();
+        projInp.childNodes[1].onclick = saveProject
 
-            else {
-                var projList = document.getElementsByClassName("projectItem")
-                if (projList[0].childNodes[0].className != "projInput") {
-                    listCover.insertBefore(projInp, projList[0])
-                }
+        if (listCover.childElementCount == 0) {
+            listCover.appendChild(projInp)
+        }
+        else {
+            var projList = document.getElementsByClassName("projectItem")
+            if (projList[0].childNodes[0].className != "projInput") {
+                listCover.insertBefore(projInp, projList[0])
             }
 
-            document.getElementsByClassName("projInput")[0].focus()
         }
-    }
+        document.getElementsByClassName("projInput")[0].focus()
 
+    }
 
 
+    //add working of task button
+    document.getElementById("button").onclick = () => {
 
-    thisRenderer.renderTaskCreator = function () {
+        var saveTask = function (form) {
+            var checkListItems = []
+            form[4].childNodes.forEach((checkListItem) => {
+                var fetchedValue = checkListItem.childNodes[1].value
+                if (fetchedValue != "")
+                    checkListItems.push(fetchedValue)
+            })
 
-        //add working of add task button
-        document.getElementById("button").onclick = () => {
 
-            var saveTask = function (form) {
-                var checkListItems = []
-                form[4].childNodes.forEach((checkListItem) => {
-                    var fetchedValue = checkListItem.childNodes[1].value
-                    if (fetchedValue != "")
-                        checkListItems.push(fetchedValue)
-                })
+            var newCreatedTask = ToDoList(form[1].value, form[2].value, form[3].value, Checklist(checkListItems))
 
 
-                var newCreatedTask = ToDoList(form[1].value, form[2].value, form[3].value, Checklist(checkListItems))
-                Session.user.projects[thisRenderer.projectNo].toDoLists.push(newCreatedTask)
-                thisRenderer.myTaskRenderer.renderTasks()
-                Session.pushUpdate()
-            }
+            Session.user.projects[number].toDoLists.push(newCreatedTask)
 
-            var taskArea = document.getElementById("taskList")
-            var taskEditor = createTaskEditorDom()
+            // document.getElementById("taskList").innerHTML = ''
+            myTaskRenderer.renderTasks()
+            // renderTasks(number)
+            Session.pushUpdate()
+        }
 
-            taskEditor.childNodes[5].onclick = (elem) => {
-                var form = elem.srcElement.parentNode.childNodes;
-                saveTask(form);
-            }
+        var taskArea = document.getElementById("taskList")
+        var taskInput = createTaskInputDom()
 
-            if (taskArea.childElementCount == 0) {
-                taskArea.appendChild(taskEditor)
-            }
+        taskInput.childNodes[5].onclick = (elem) => {
+            var form = elem.srcElement.parentNode.childNodes;
+            saveTask(form);
+        }
 
-            else {
-                var metaList = JSON.parse(taskArea.lastElementChild.id)
-                thisRenderer.myTaskRenderer.renderTasks(metaList[0])
-                var firstBlock = taskArea.firstElementChild
-                
-                if (firstBlock.childNodes[0].className == "tick") 
-                    taskArea.insertBefore(taskEditor, firstBlock)
+        if (taskArea.childElementCount == 0) {
+            taskArea.appendChild(taskInput)
+        }
+        else {
+            var metaList = JSON.parse(taskArea.lastElementChild.id)
+            
 
+            myTaskRenderer.renderTasks(metaList[0])
+            var firstBlock = taskArea.firstElementChild
+            if (firstBlock.childNodes[0].className == "tick") {
+                taskArea.insertBefore(taskInput, firstBlock)
             }
-            document.getElementsByClassName("titleInput")[0].focus()
+
         }
+        document.getElementsByClassName("titleInput")[0].focus()
     }
 
-    thisRenderer.renderProjectList = function (idProjNo = thisRenderer.projectNo) {
-        //clear already present project items
-        document.getElementById("list").innerHTML = ''
 
-        // console.log(thisRenderer.projectNo)
-        var i = 0
-        thisRenderer.projects.forEach(element => {
-            var projectHtml = createProjectDom(element.name);
-            projectHtml.id = JSON.stringify([i++])
-            document.getElementById("list").appendChild(projectHtml);
-            projectHtml.childNodes[0].onclick = thisRenderer.openProject
-            projectHtml.childNodes[1].onclick = thisRenderer.deleteProject
-        });
-
-        thisRenderer.highlight(idProjNo)
-        thisRenderer.myTaskRenderer.renderTasks(idProjNo)
-        thisRenderer.renderProjectCreator()
-        thisRenderer.renderTaskCreator()
-    }
 
-    return thisRenderer
 
-}
 
 
-var renderUserName = function () {
-    var renderUserNameEditor = function () {
-        var userElement = document.getElementById("username")
-        var inp = createUserInput()
-        inp.id = "username"
-        inp.childNodes[1].onclick = () => {
-            var givenName = inp.childNodes[0].value
-            Session.user.name = givenName ? givenName : "anonymous"
-            Session.pushUpdate()
-            location.reload()
-        }
-        userElement.parentElement.replaceChild(inp, userElement)
-
-    }
+    projects.forEach(element => {
+        var projectHtml = createProjectDom(element.name);
+        projectHtml.id = JSON.stringify([i++])
+        document.getElementById("list").appendChild(projectHtml);
+        projectHtml.childNodes[0].onclick = openProject
+        projectHtml.childNodes[1].onclick = deleteProject
+    });
+    highlight(number)
+    // renderTasks(number);
+    myTaskRenderer.renderTasks()
+}
 
+var manageUser = function () {
     var userElement = document.getElementById("username")
-    userElement.innerHTML = Session.user.name
-    userElement.onclick = renderUserNameEditor
-}
+    var inp = createUserInput()
+    inp.id = "username"
+    inp.childNodes[1].onclick = () => {
+        var givenName = inp.childNodes[0].value
+        Session.user.name = givenName ? givenName : "anonymous"
+        Session.pushUpdate()
+        location.reload()
+    }
+    userElement.parentElement.replaceChild(inp, userElement)
 
-var renderTodoList = function () {
-    var projectNo = 0
-    var myProjectRenderer = ProjectRenderer(projectNo)
-    myProjectRenderer.renderProjectList()
 }
 
 var renderPage = function () {
 
-    Session.setUpUser()
-    renderUserName()
-    renderTodoList();
+
+    Session.initiatePage()
+    var userElement = document.getElementById("username")
+    userElement.innerHTML = Session.user.name
+    userElement.onclick = manageUser
+    renderProjects(0);
 }
 
 export { renderPage }
diff --git a/src/todoClasses.js b/src/todoClasses.js
index c5480be..eaed5f4 100644
--- a/src/todoClasses.js
+++ b/src/todoClasses.js
@@ -72,7 +72,7 @@ var Session = (function () {
     session.user = ""
 
     //setting up session's user by fetching user identification data stored in localStored
-    session.setUpUser = function () {
+    session.initiatePage = function () {
         //if no data of user set up new default user
         if (localStorage.getItem('user') == null) {
             session.user = new User();
diff --git a/src/todoDom.js b/src/todoDom.js
index 0a02048..52ef017 100644
--- a/src/todoDom.js
+++ b/src/todoDom.js
@@ -9,7 +9,7 @@ var createDiv= function(className, innerValue = null){
 var createInput = function(className, maxLen, place = "") {
     var inp = document.createElement('input')
     inp.className = className
-    // inp.autofocus = "true"
+    inp.autofocus = "true"
     inp.maxLength = maxLen
     inp.placeholder = place
     return inp
@@ -18,7 +18,7 @@ var createInput = function(className, maxLen, place = "") {
 var createTextArea = function(className, maxLen, place = "") {
     var inp = document.createElement('textarea')
     inp.className = className
-    // inp.autofocus = true
+    inp.autofocus = true
     inp.maxLength = maxLen
     inp.placeholder = place
     return inp
@@ -123,7 +123,7 @@ var addItemToChecklist = function(checklistInput, value = null){
     return checklistInput
 }
 
-var createTaskEditorDom = function() {
+var createTaskInputDom = function() {
 
     var detailedTaskInput = createDiv("detailedTaskItem")
     
@@ -166,4 +166,4 @@ var createUserInput = function(){
 
 
 
-export {createTaskDom, createProjectDom, createExpandedTaskDom, createProjInputDom, createTaskEditorDom, createUserInput, addItemToChecklist}
\ No newline at end of file
+export {createTaskDom, createProjectDom, createExpandedTaskDom, createProjInputDom, createTaskInputDom, createUserInput, addItemToChecklist}
\ No newline at end of file
